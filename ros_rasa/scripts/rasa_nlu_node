#!/usr/bin/env python3

import os
import sys

# ROS
import rospy

from ros_rasa import rasa_nlu

from clf_speech_msgs.msg import Entity, NLU
import std_msgs.msg


class RASANode:
    def __init__(self, model):
        rospy.loginfo(logger_name="RASANode", msg="initializing:")
        rospy.loginfo(logger_name="RASANode", msg=f" - model={model}")

        self.recognizer = rasa_nlu.RasaNLU(model)

        self.result_pub = rospy.Publisher("~nlu", NLU, queue_size=1)

    def new_message(self, data):

        result = self.recognizer.inference(data.data)

        nlu = NLU()

        nlu.text = result["text"]
        nlu.intent = result["intent"]["name"]
        nlu.conf = result["intent"]["confidence"]

        for entity in result["entities"]:
            e = Entity()
            e.key = entity["entity"]
            e.value = entity["value"]
            nlu.entities.append(e)

        self.result_pub.publish(nlu)
        rospy.loginfo(logger_name="RASANode", msg=f"{nlu}")


if __name__ == "__main__":

    # Start ROS node
    rospy.init_node("rasa")

    try:
        _model = os.path.expanduser(rospy.get_param("~model"))
    except KeyError as e:
        rospy.logerr(logger_name="RASANode", msg="Parameter %s not found" % e)
        sys.exit(1)

    node = RASANode(_model)

    rospy.Subscriber("~input", std_msgs.msg.String, node.new_message)

    rospy.loginfo(logger_name="RASANode", msg="\nRASA running")

    rospy.spin()
